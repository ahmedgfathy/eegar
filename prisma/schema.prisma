// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Broker {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  phone       String?  @db.VarChar(50) @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Broker Information
  email       String?  @db.VarChar(255)
  address     String?  @db.Text
  city        String?  @db.VarChar(100)
  area        String?  @db.VarChar(100)
  company     String?  @db.VarChar(255)
  
  // Broker Profile
  status      BrokerStatus @default(ACTIVE)
  licenseNumber String?   @db.VarChar(100)
  yearsOfExperience Int?
  specializations String? @db.Text // JSON array of specializations
  profileImage String?   @db.VarChar(255)
  
  // Performance Metrics
  totalProperties Int      @default(0)
  activeDealCount Int      @default(0)
  lastActivity    DateTime?
  rating          Decimal? @db.Decimal(3,2)
  totalDeals      Int      @default(0)
  
  // Contact Preferences
  preferredContactMethod ContactMethod @default(WHATSAPP)
  notes       String?       @db.Text
  
  // Relationships
  messages    Message[]
  ownedProperties Property[] @relation("PropertyOwner")
  propertyInquiries PropertyInquiry[]
  sentInquiries PropertyInquiry[] @relation("InquirySender")
  
  @@map("brokers")
}

model Message {
  id          Int      @id @default(autoincrement())
  brokerId    Int
  content     String   @db.Text
  messageDate DateTime
  messageTime String   @db.VarChar(10)
  attachments String?  @db.Text // JSON string for file attachments
  messageType MessageType @default(TEXT)
  
  // Property extraction flags
  containsPropertyInfo Boolean @default(false)
  extractedPropertyId Int?
  
  // Message analysis
  sentiment   String?  @db.VarChar(50) // POSITIVE, NEGATIVE, NEUTRAL
  language    String?  @db.VarChar(10) // ar, en
  
  createdAt   DateTime @default(now())
  
  broker      Broker   @relation(fields: [brokerId], references: [id], onDelete: Cascade)
  extractedProperty Property? @relation(fields: [extractedPropertyId], references: [id])
  
  @@map("messages")
}

model Property {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  description String?  @db.Text
  propertyType PropertyType
  listingType ListingType // FOR_SALE, FOR_RENT, WANTED
  
  // Pricing
  price       Decimal?  @db.Decimal(15,2)
  pricePerMeter Decimal? @db.Decimal(10,2)
  currency    String   @db.VarChar(10) @default("EGP")
  negotiable  Boolean  @default(true)
  
  // Location
  area        Decimal? @db.Decimal(10,2) // in square meters
  location    String?  @db.VarChar(255)
  address     String?  @db.Text
  city        String?  @db.VarChar(100)
  neighborhood String? @db.VarChar(100)
  district    String?  @db.VarChar(100)
  
  // Property Details
  bedrooms    Int?
  bathrooms   Int?
  floors      Int?
  floor       Int?     // which floor (for apartments)
  parking     Boolean  @default(false)
  furnished   Boolean  @default(false)
  balcony     Boolean  @default(false)
  elevator    Boolean  @default(false)
  
  // Property Features
  features    String?  @db.Text // JSON array of features
  condition   PropertyCondition?
  buildingAge Int?     // in years
  
  // Property Status
  status      PropertyStatus @default(AVAILABLE)
  featured    Boolean        @default(false)
  urgentSale  Boolean        @default(false)
  
  // Source Information
  extractedFromMessage Boolean @default(false)
  sourceMessageId Int?
  ownerId     Int?
  
  // Media
  images      String?  @db.Text // JSON string for image URLs
  
  // Metadata
  viewCount   Int      @default(0)
  inquiryCount Int     @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  owner       Broker?  @relation("PropertyOwner", fields: [ownerId], references: [id])
  inquiries   PropertyInquiry[]
  messages    Message[] // Messages that extracted this property
  
  @@map("properties")
}

model PropertyInquiry {
  id         Int      @id @default(autoincrement())
  brokerId   Int      // The broker making the inquiry
  propertyId Int
  senderId   Int?     // The broker who sent the inquiry (for referrals)
  inquiryType InquiryType @default(GENERAL)
  inquiryDate DateTime @default(now())
  message    String?  @db.Text
  status     InquiryStatus @default(PENDING)
  
  // Inquiry Details
  budget     Decimal? @db.Decimal(15,2)
  clientRequirements String? @db.Text
  urgency    Priority @default(MEDIUM)
  
  // Response
  responseDate DateTime?
  response   String?  @db.Text
  
  broker     Broker   @relation(fields: [brokerId], references: [id], onDelete: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  sender     Broker?  @relation("InquirySender", fields: [senderId], references: [id])
  
  @@map("property_inquiries")
}

enum BrokerStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum ContactMethod {
  WHATSAPP
  PHONE
  EMAIL
  IN_PERSON
}

enum ListingType {
  FOR_SALE
  FOR_RENT
  WANTED
  SOLD
  RENTED
}

enum PropertyCondition {
  NEW
  EXCELLENT
  GOOD
  FAIR
  NEEDS_RENOVATION
}

enum InquiryType {
  GENERAL
  VIEWING_REQUEST
  PRICE_INQUIRY
  AVAILABILITY_CHECK
  NEGOTIATION
  REFERRAL
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MessageType {
  TEXT
  IMAGE
  DOCUMENT
  VOICE
  VIDEO
  LINK
  LOCATION
}

enum PropertyType {
  APARTMENT
  HOUSE
  VILLA
  DUPLEX
  PENTHOUSE
  OFFICE
  SHOP
  WAREHOUSE
  LAND
  GARAGE
  STUDIO
}

enum PropertyStatus {
  AVAILABLE
  SOLD
  RENTED
  RESERVED
  UNDER_CONSTRUCTION
  OFF_MARKET
}

enum InquiryStatus {
  PENDING
  RESPONDED
  SCHEDULED
  COMPLETED
  CANCELLED
  EXPIRED
}
